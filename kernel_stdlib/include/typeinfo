// This is a "system" file, so we get to use reserved identifiers
// NOLINTBEGIN(bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp)
// And we can modify the std namespace, because we're defining it
// NOLINTBEGIN(cert-dcl58-cpp)

#ifndef __KERNEL_STDLIB_TYPEINFO__
#define __KERNEL_STDLIB_TYPEINFO__

// #TODO: Just the basics for now

namespace std
{
    class type_info
    {
    public:
        // Deleting copy and move constructor
        type_info(const type_info& __aOther) = delete;
        type_info(type_info&& __aOther) = delete;

        /**
         * Destructor
         */
        virtual ~type_info() = default;

        // Deleting copy and move assignment
        type_info operator=(const type_info& __aOther) = delete;
        type_info operator=(type_info&& __aOther) = delete;

        /**
         * Obtains the implementation-defined name of the type
         */
        [[nodiscard]] const char* name() const
        {
            return __pName;
        }

        /**
         * Checks to see if this type_info precedes the other type in collation order
         * 
         * @param __aOther Other type_info to compare with
         * 
         * @return If this type_info precedes the other one
         */
        [[nodiscard]] bool before(const type_info& __aOther) const noexcept
        {
            // #TODO: Should probably be std::less when we get that
            // we assume the names are merged and a pointer compare will work
            return __pName < __aOther.__pName;
        }

        // #TODO: need to make hash_code

        /**
         * Compares this type_info with another, return if they are equal
         * 
         * @param __aOther type_info to compare with
         * 
         * @return True if they are the same
         */
        constexpr bool operator==(const type_info& __aOther) const noexcept
        {
            // we assume the names are merged and a pointer compare will work
            return __pName == __aOther.__pName;
        }

        /**
         * Compares this type_info with another, return if they are not equal
         * 
         * @param __aOther type_info to compare with
         * 
         * @return True if they are the not the same
         */
        constexpr bool operator!=(const type_info& __aOther) const noexcept
        {
            return !operator==(__aOther);
        }

    protected:
        /**
         * Constructor
         * 
         * @param __apName The type name
         */
        explicit type_info(const char* __apName): __pName{ __apName } {}

    private:
        const char* __pName = nullptr;
    };
}

#endif // __KERNEL_STDLIB_TYPEINFO__

// NOLINTEND(cert-dcl58-cpp)
// NOLINTEND(bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp)